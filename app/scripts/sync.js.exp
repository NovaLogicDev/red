const fs = require("fs");
const { execFile, exec } = require("child_process");
const path = require("path");
const ntpClient = require('ntp-client');

//Latest VLC module version
const LATEST_MODULE_VER = 110;

//Local anime folder and VLC exe path vars
var VLC_EXE = window.localStorage.vlcExePath || 'C:\\Program Files\\VideoLAN\\VLC\\vlc.exe';

//VLC processes and sync vars
var vlcProcess, vlcIsOpen, forceVLCSkip = false, flags = {
    allowedOffset: 1,
    lowLatencyOffset: 0.5,
    controllerSeekOffset: 4,
    serverTimeLimit: "Infinity"
};

//HTTP request auth and configuration
jQuery.ajaxSetup({
    timeout: 1000, beforeSend: function (xhr) {
        xhr.setRequestHeader("Authorization", "Basic " + btoa(":anime"));
    }
});

//Flags
firebase.database().ref("/flags").on('value', snap => {
    var data = snap.val();
    if (data) {
        Object.assign(flags, data);
    }
});

//TIME SYNC
var isController = true;
var pauseAttempts = { pausedAt: null, attempts: null };
var syncAtTime = false;
var skiplessStreak = 0;
var notInSyncCounter = 0;
var reqLatency = 0;

//debugging
var lowestOffset = Infinity;
var highestOffset = -Infinity;
setInterval(function () {
    if (vlcIsOpen && vlcPlaybackState && vlcPlaybackState.video) {
        var beforeReq = new Date().getTime();
        jQuery.getJSON("http://localhost:9090/requests/jottocraft.json" + objectToURLParam({
            //Pass clock sync data to VLC
            hasServerTime: true,
            serverTime: getServerTime().getTime() + reqLatency,

            //Pass playback sync data to VLC
            hasSyncData: true,
            playing: vlcPlaybackState.playing,
            file: file.replace("/", "\\"),
            syncTime: vlcPlaybackState.playing ? vlcPlaybackState.startedAt : vlcPlaybackState.pausedAt,
            allowedOffset: fluid.get("pref-lowLatency") == "false" ? flags.allowedOffset : flags.lowLatencyOffset,

            //Pass track sync data to VLC
            hasTrackData: true,
            spuTrack: "AAAA",
            videoTrack: "AAA",
            audioTrack: "AAAA",

            //Is controller?
            isController: true
        }), function (data) {
            //Calculate request latency
            var afterReq = new Date().getTime();
            reqLatency = afterReq - beforeReq;

            console.log(data);
            return;
            var adjustmentMade = false;

            //Set file
            if (!data?.information?.meta?.filename || (data?.information?.meta?.filename && !file.endsWith(data.information.meta.filename))) {
                console.log("Loading file");
                jQuery.get("http://localhost:9090/requests/jottocraft.json?command=playitem&input=" + file.replace("/", "\\"));

                adjustmentMade = true;
                syncAtTime = false;
            }

            //Sync play/pause
            if (vlcPlaybackState.playing && (data.state == "paused")) {
                if (isController && (syncAtTime == vlcPlaybackState.startedAt)) {
                    console.log("Controller wants to pause the video");
                    firebase.database().ref("/session/" + mySessionID + "/status/startedAt").remove();
                    firebase.database().ref("/session/" + mySessionID + "/status/pausedAt").set(data.position * 100);
                    firebase.database().ref("/session/" + mySessionID + "/status/playing").set(false);
                } else {
                    console.log("Playing video");
                    jQuery.get("http://localhost:9090/requests/jottocraft.json?command=play");
                }

                adjustmentMade = true;
            } else if (!vlcPlaybackState.playing && (data.state == "playing")) {
                if (isController && (syncAtTime == vlcPlaybackState.pausedAt)) {
                    console.log("Controller wants to resume the video");
                    firebase.database().ref("/session/" + mySessionID + "/status/startedAt").set(getServerTime().getTime() - (data.time * 1000));
                    firebase.database().ref("/session/" + mySessionID + "/status/pausedAt").remove();
                    firebase.database().ref("/session/" + mySessionID + "/status/playing").set(true);
                } else {
                    console.log("Pausing video");
                    jQuery.get("http://localhost:9090/requests/jottocraft.json?command=pause");
                }

                adjustmentMade = true;
            }

            //Sync time
            if (vlcPlaybackState.playing && vlcPlaybackState.startedAt) {
                var correctTime = (getServerTime().getTime() - vlcPlaybackState.startedAt) / 1000;
                console.debug("Offset (ms):", (data.time - correctTime) * 1000);
                if ((data.time - correctTime) * 1000 < lowestOffset) lowestOffset = (data.time - correctTime) * 1000;
                if ((data.time - correctTime) * 1000 > highestOffset) highestOffset = (data.time - correctTime) * 1000;
                if (isController && (syncAtTime == vlcPlaybackState.startedAt) && (Math.abs(data.time - correctTime) > flags.controllerSeekOffset)) {
                    console.log("Controller wants to seek playback");
                    firebase.database().ref("/session/" + mySessionID + "/status/startedAt").set(getServerTime().getTime() - (data.time * 1000));

                    adjustmentMade = true;
                } else if (Math.abs(data.time - correctTime) > (fluid.get("pref-lowLatency") == "false" ? flags.allowedOffset : flags.lowLatencyOffset)) {
                    console.log("Seeking video to " + correctTime);
                    jQuery.get("http://localhost:9090/requests/jottocraft.json?command=directseek&val=" + correctTime);

                    adjustmentMade = true;
                }
            } else if (!vlcPlaybackState.playing && vlcPlaybackState.pausedAt) {
                if (pauseAttempts.pausedAt !== vlcPlaybackState.pausedAt) {
                    pauseAttempts.pausedAt = vlcPlaybackState.pausedAt;
                    pauseAttempts.attempts = 0;
                }

                if (pauseAttempts.attempts < 5) {
                    jQuery.get("http://localhost:9090/requests/jottocraft.json?command=commonseek&val=" + vlcPlaybackState.pausedAt + "%25");

                    adjustmentMade = true;
                }

                pauseAttempts.attempts++;
            }

            //Check if any adjustments were made
            if (adjustmentMade) { skiplessStreak = 0; } else { skiplessStreak++; }
            if ((syncAtTime !== (vlcPlaybackState.playing ? vlcPlaybackState.startedAt : vlcPlaybackState.pausedAt)) && (skiplessStreak >= 20)) {
                console.log("Playback is in sync");
                syncAtTime = vlcPlaybackState.playing ? vlcPlaybackState.startedAt : vlcPlaybackState.pausedAt;
                notInSyncCounter = 0;
            } else if (syncAtTime !== (vlcPlaybackState.playing ? vlcPlaybackState.startedAt : vlcPlaybackState.pausedAt)) {
                notInSyncCounter++;
            }

            if (notInSyncCounter == 1) {
                console.log("Playback is not in sync");
            } else if (notInSyncCounter == 100) {
                console.warn("It's taking a while to sync playback. There is likely something wrong.");
            }
        });
    }
}, 100);

//OPEN VLC ----------------------
function openVLC() {
    vlcIsOpen = false;
    load("Starting VLC...");
    return new Promise((fResolve, fReject) => {
        new Promise((resolve, reject) => {
            //Check the VLC exe path
            if (fs.existsSync(VLC_EXE)) {
                resolve();
            } else if ((VLC_EXE == 'C:\\Program Files\\VideoLAN\\VLC\\vlc.exe') && fs.existsSync('C:\\Program Files (x86)\\VideoLAN\\VLC\\vlc.exe')) {
                window.localStorage.vlcExePath = 'C:\\Program Files (x86)\\VideoLAN\\VLC\\vlc.exe';
                resolve();
            } else {
                actionNeeded("Cannot find VLC",
                    "Red cannot locate VLC on your computer. You can tell Red where VLC is by setting the VLC path in settings. Once you've done that, click the button below to try again.", [
                    {
                        text: "Try again",
                        action: () => {
                            openVLC().then(fResolve).catch(fReject);
                        }
                    }
                ])
            }
        }).then(() => {
            //Check if VLC is already open, if not, open it
            return new Promise((resolve, reject) => {
                jQuery.getJSON("http://localhost:9090/requests/jottocraft.json", (d) => { resolve(d); }).fail(function () {
                    vlcProcess = execFile(VLC_EXE, ['--extraintf=http', '--http-port=9090', '--http-password=anime', '--file-caching=10000', '--network-caching=10000']);
                    resolve();
                })
            });
        }).then((data) => {
            //Wait for VLC to open. If it is already open, skip this step
            return new Promise((resolve, reject) => {
                if (data) {
                    resolve(data);
                } else {
                    var resolved = false;
                    var checkVLC = setInterval(() => {
                        jQuery.getJSON("http://localhost:9090/requests/jottocraft.json", (r) => {
                            clearInterval(checkVLC);
                            if (!resolved) {
                                resolved = true;
                                resolve(r);
                            }
                        }).fail(function (e) {
                            if (e.status == 404) {
                                clearInterval(checkVLC);
                                resolved = true;
                                reject("vlcComm");
                            }
                        })
                    }, 1000);
                }
            })
        }).then((data) => {
            //Check for module updates
            if (data.jottocraft >= LATEST_MODULE_VER) {
                vlcIsOpen = true;
                fResolve();
            } else {
                actionNeeded("Update VLC module",
                    "There's a new version of the Red integration module for VLC. Click the button below to install the new version.", [
                    {
                        text: "Update module",
                        icon: "security",
                        action: () => {
                            installModule().then(() => {
                                openVLC().then(fResolve).catch(fReject);
                            })
                        }
                    }
                ])
            }
        }).catch(e => {
            if (e == "vlcComm") {
                //If unable to communicate with VLC, ask the user to install the module
                actionNeeded("Install VLC module",
                    "In order for Red to communicate with VLC, you'll need to install an integration module in VLC.\n\nThe module will only run when you are using Red.", [
                    {
                        text: "Install module",
                        icon: "security",
                        action: () => {
                            installModule().then(() => {
                                openVLC().then(fResolve).catch(fReject);
                            })
                        }
                    }
                ])
            } else {
                fReject(e);
            }
        });
    })
}

function installModule() {
    if (fs.existsSync(path.join(__dirname, "moduleinstaller.log"))) fs.unlinkSync(path.join(__dirname, "moduleinstaller.log"));
    return new Promise((resolve, reject) => {
        jQuery.get("http://localhost:9090/requests/jottocraft.json?command=quit", next).fail(function (e) {
            if (e.status == 404) {
                if (vlcProcess && vlcProcess.kill && vlcProcess.kill()) {
                    next();
                } else {
                    let res = false;
                    window.alert("Please close the VLC window so that the integration module can be installed");
                    load("Please close the VLC window...");
                    let interval = setInterval(() => {
                        jQuery.get("http://localhost:9090/requests/status.json").fail(function (e) {
                            if (!res) {
                                res = true;
                                clearInterval(interval);
                                next();
                            }
                        })
                    }, 1000);
                }
            } else {
                next();
            }
        });

        function next() {
            load("Installing module...");
            let res = false;
            let interval = setInterval(() => {
                if (fs.existsSync(path.join(__dirname, "moduleinstaller.log")) && !res) {
                    res = true;
                    clearInterval(interval);
                    fs.unlinkSync(path.join(__dirname, "moduleinstaller.log"));
                    load("Waiting for VLC to restart...");
                    resolve();
                }
            }, 1000);
            exec(`"${path.join(__dirname, "copymodule.bat").replace("/", "\\")}" "${path.join(VLC_EXE, "..").replace("/", "\\")}"`);
        }
    })
}

function objectToURLParam(obj) {
    if (Object.keys(obj).length) {
        var param = "?";
        Object.keys(obj).forEach(k => {
            if (param !== "?") param += "&";
            param += k + "=" + obj[k];
        });
        return param;
    } else {
        return "";
    }
}

//SERVER TIME
function getServerTime() {
    var date = new Date();
    date.setTime(date.getTime() + offset);
    return date;
}

var offset = Infinity;
var offsetReqTime = Infinity;
var runs = 0;
function calcOffset() {
    return new Promise((resolve, reject) => {
        var beforeReq = new Date().getTime();
        jQuery.getJSON("https://timesync.red.jottocraft.com/time", function (res, status, xhr) {
            var reqTime = new Date().getTime() - beforeReq;

            //Get raw offset
            var newOffset = new Date(res.serverTime).getTime() - new Date().getTime();

            //if (newOffset < offset) offset = newOffset;
            if (reqTime <= offsetReqTime) {
                offset = newOffset;
                offsetReqTime = reqTime;
            }

            runs++;
            if ((flags.serverTimeLimit !== "Infinity") && (runs >= flags.serverTimeLimit)) clearInterval(timerInterval);
            console.log("Offset: ", newOffset);
            resolve();
        });
    })
}

var timerInterval = setInterval(calcOffset, 10000);
calcOffset();